---
- name: Check if servers are physical or virtual using dmidecode
  hosts: all
  gather_facts: yes
  vars:
    physical_servers_file: "/tmp/physical_servers.txt"
    virtual_servers_file: "/tmp/virtual_servers.txt"
  
  tasks:
    - name: Gather system information
      setup:
        gather_subset:
          - hardware
          - virtual

    - name: Get detailed hardware information using dmidecode
      shell: |
        # Get system manufacturer
        MANUFACTURER=$(dmidecode -s system-manufacturer 2>/dev/null | head -1 || echo "Unknown")
        
        # Get system product name  
        PRODUCT=$(dmidecode -s system-product-name 2>/dev/null | head -1 || echo "Unknown")
        
        # Get system version
        VERSION=$(dmidecode -s system-version 2>/dev/null | head -1 || echo "Unknown")
        
        # Get chassis type
        CHASSIS=$(dmidecode -s chassis-type 2>/dev/null | head -1 || echo "Unknown")
        
        # Get BIOS vendor
        BIOS_VENDOR=$(dmidecode -s bios-vendor 2>/dev/null | head -1 || echo "Unknown")
        
        echo "MANUFACTURER:$MANUFACTURER|PRODUCT:$PRODUCT|VERSION:$VERSION|CHASSIS:$CHASSIS|BIOS:$BIOS_VENDOR"
      register: dmidecode_info
      ignore_errors: yes
      changed_when: false

    - name: Parse dmidecode output
      set_fact:
        dmi_manufacturer: "{{ dmidecode_info.stdout.split('|')[0].split(':')[1] | default('Unknown') }}"
        dmi_product: "{{ dmidecode_info.stdout.split('|')[1].split(':')[1] | default('Unknown') }}"
        dmi_version: "{{ dmidecode_info.stdout.split('|')[2].split(':')[1] | default('Unknown') }}"
        dmi_chassis: "{{ dmidecode_info.stdout.split('|')[3].split(':')[1] | default('Unknown') }}"
        dmi_bios: "{{ dmidecode_info.stdout.split('|')[4].split(':')[1] | default('Unknown') }}"

    - name: Check systemd-detect-virt (additional check)
      shell: systemd-detect-virt 2>/dev/null || echo "none"
      register: systemd_virt
      ignore_errors: yes
      changed_when: false

    - name: Debug hardware information
      debug:
        msg: 
          - "Server: {{ inventory_hostname }}"
          - "DMI Manufacturer: {{ dmi_manufacturer }}"
          - "DMI Product: {{ dmi_product }}"
          - "DMI Version: {{ dmi_version }}"
          - "DMI Chassis: {{ dmi_chassis }}"
          - "DMI BIOS: {{ dmi_bios }}"
          - "Systemd-detect-virt: {{ systemd_virt.stdout | default('unknown') }}"
          - "Ansible virt type: {{ ansible_virtualization_type | default('unknown') }}"

    - name: Determine if server is VIRTUAL based on dmidecode and other indicators
      set_fact:
        is_virtual: >-
          {{
            # Check systemd-detect-virt first (most reliable)
            (systemd_virt.stdout is defined and 
             systemd_virt.stdout != "none" and 
             systemd_virt.stdout != "") or
            
            # Check Ansible virtualization facts
            (ansible_virtualization_type is defined and 
             ansible_virtualization_type != "NA" and 
             ansible_virtualization_type != "none" and
             ansible_virtualization_type != "") or
            (ansible_virtualization_role is defined and 
             ansible_virtualization_role == "guest") or
             
            # Check dmidecode manufacturer for virtual indicators
            (dmi_manufacturer is defined and (
              "VMware" in dmi_manufacturer or
              "innotek GmbH" in dmi_manufacturer or
              "QEMU" in dmi_manufacturer or
              "Microsoft Corporation" in dmi_manufacturer or
              "Xen" in dmi_manufacturer or
              "Red Hat" in dmi_manufacturer or
              "Amazon EC2" in dmi_manufacturer or
              "Google" in dmi_manufacturer or
              "Oracle Corporation" in dmi_manufacturer or
              "Nutanix" in dmi_manufacturer or
              "oVirt" in dmi_manufacturer or
              "Parallels" in dmi_manufacturer
            )) or
            
            # Check dmidecode product for virtual indicators  
            (dmi_product is defined and (
              "VMware" in dmi_product or
              "VirtualBox" in dmi_product or
              "KVM" in dmi_product or
              "RHEV" in dmi_product or
              "HVM domU" in dmi_product or
              "Bochs" in dmi_product or
              "OpenStack" in dmi_product or
              "Oracle VM" in dmi_product or
              "oVirt" in dmi_product or
              "Virtual Machine" in dmi_product or
              "Hyper-V" in dmi_product or
              "Parallels" in dmi_product
            )) or
            
            # Check BIOS vendor for virtual indicators
            (dmi_bios is defined and (
              "VMware" in dmi_bios or
              "innotek GmbH" in dmi_bios or
              "QEMU" in dmi_bios or
              "Xen" in dmi_bios or
              "Microsoft Corporation" in dmi_bios or
              "Parallels" in dmi_bios
            ))
          }}

    - name: Determine physical server indicators
      set_fact:
        physical_indicators: >-
          {{
            # Check for physical server manufacturers
            (dmi_manufacturer is defined and (
              "Dell Inc." in dmi_manufacturer or
              "Hewlett-Packard" in dmi_manufacturer or
              "HP" in dmi_manufacturer or
              "Hewlett Packard Enterprise" in dmi_manufacturer or
              "HPE" in dmi_manufacturer or
              "IBM" in dmi_manufacturer or
              "Lenovo" in dmi_manufacturer or
              "Cisco" in dmi_manufacturer or
              "Supermicro" in dmi_manufacturer or
              "Intel" in dmi_manufacturer or
              "FUJITSU" in dmi_manufacturer or
              "NEC" in dmi_manufacturer
            )) or
            
            # Check for physical server product names
            (dmi_product is defined and (
              "PowerEdge" in dmi_product or
              "ProLiant" in dmi_product or
              "ThinkServer" in dmi_product or
              "System x" in dmi_product or
              "UCS" in dmi_product or
              "PRIMERGY" in dmi_product or
              "Express" in dmi_product
            ))
          }}

    - name: Final determination - Physical or Virtual
      set_fact:
        final_classification: >-
          {{
            'VIRTUAL' if is_virtual else (
              'PHYSICAL' if physical_indicators else 'UNKNOWN'
            )
          }}

    - name: Display server classification with details
      debug:
        msg: 
          - "{{ inventory_hostname }} is {{ final_classification }}"
          - "Manufacturer: {{ dmi_manufacturer }}"
          - "Product: {{ dmi_product }}"
          - "Chassis: {{ dmi_chassis }}"
          - "Systemd-detect-virt: {{ systemd_virt.stdout | default('none') }}"

    - name: Initialize physical servers file with header (run once)
      local_action:
        module: copy
        content: |
          # Physical Servers List (Oracle Linux & RHEL) - Enhanced Detection
          # Generated on: {{ ansible_date_time.iso8601 }}
          # Format: IP/hostname | OS | Manufacturer | Product | Chassis | Detection Method
          # ========================================================================
        dest: "{{ physical_servers_file }}"
        force: no
      run_once: yes
      delegate_to: localhost

    - name: Initialize virtual servers file with header (run once)
      local_action:
        module: copy
        content: |
          # Virtual Servers List (Oracle Linux & RHEL) - Enhanced Detection
          # Generated on: {{ ansible_date_time.iso8601 }}
          # Format: IP/hostname | OS | Virtualization | Manufacturer | Product | Detection Method
          # ========================================================================
        dest: "{{ virtual_servers_file }}"
        force: no
      run_once: yes
      delegate_to: localhost

    - name: Add server details to physical servers list
      local_action:
        module: lineinfile
        path: "{{ physical_servers_file }}"
        line: "{{ inventory_hostname }} | {{ ansible_distribution }} {{ ansible_distribution_version }} | {{ dmi_manufacturer }} | {{ dmi_product }} | {{ dmi_chassis }} | {{ 'dmidecode' if physical_indicators else 'fallback' }}"
        create: yes
      when: final_classification == 'PHYSICAL'

    - name: Add server details to virtual servers list  
      local_action:
        module: lineinfile
        path: "{{ virtual_servers_file }}"
        line: "{{ inventory_hostname }} | {{ ansible_distribution }} {{ ansible_distribution_version }} | {{ systemd_virt.stdout | default(ansible_virtualization_type | default('detected')) }} | {{ dmi_manufacturer }} | {{ dmi_product }} | {{ 'dmidecode+systemd' if systemd_virt.stdout != 'none' else 'dmidecode' }}"
        create: yes
      when: final_classification == 'VIRTUAL'

    - name: Add unknown servers to a separate section in physical file
      local_action:
        module: lineinfile
        path: "{{ physical_servers_file }}"
        line: "{{ inventory_hostname }} | {{ ansible_distribution }} {{ ansible_distribution_version }} | {{ dmi_manufacturer }} | {{ dmi_product }} | {{ dmi_chassis }} | NEEDS_MANUAL_VERIFICATION"
        create: yes
      when: final_classification == 'UNKNOWN'

  post_tasks:
    - name: Display summary
      debug:
        msg:
          - "Playbook execution completed!"
          - "Physical servers list: {{ physical_servers_file }}"
          - "Virtual servers list: {{ virtual_servers_file }}"
          - "Servers marked as UNKNOWN need manual verification"
      run_once: yes
      delegate_to: localhost

    - name: Show physical servers count
      local_action:
        module: shell
        cmd: "grep -v '^#' {{ physical_servers_file }} | wc -l"
      register: physical_count
      run_once: yes
      delegate_to: localhost
      ignore_errors: yes

    - name: Show virtual servers count  
      local_action:
        module: shell
        cmd: "grep -v '^#' {{ virtual_servers_file }} | wc -l"
      register: virtual_count
      run_once: yes
      delegate_to: localhost
      ignore_errors: yes

    - name: Display final summary with detection methods
      debug:
        msg:
          - "=== DETECTION SUMMARY ==="
          - "Physical servers found: {{ physical_count.stdout | default(0) }}"
          - "Virtual servers found: {{ virtual_count.stdout | default(0) }}"
          - "Detection methods used:"
          - "  1. dmidecode -s system-manufacturer"
          - "  2. dmidecode -s system-product-name" 
          - "  3. systemd-detect-virt"
          - "  4. Ansible virtualization facts"
          - "Physical server indicators: Dell, HP/HPE, IBM, Lenovo, Cisco, Supermicro, etc."
          - "Check files for detailed hardware information"
      run_once: yes
      delegate_to: localhost
